import streamlit as st
import requests
import pandas as pd
from typing import List, Dict, Any

# URL del backend FastAPI
BACKEND_URL = "http://localhost:8000"

# Generated by Copilot
def login_backend(ancodice: str, anpariva: str) -> bool:
    """Funzione per autenticare l'utente"""
    try:
        response = requests.post(f"{BACKEND_URL}/login", json={"ancodice": ancodice, "anpariva": anpariva})
        return response.status_code == 200
    except requests.exceptions.RequestException as e:
        st.error(f"Errore di connessione al backend: {e}")
        return False

# Generated by Copilot
def get_ordini(ancodice: str) -> List[Dict[str, Any]]:
    """Funzione per ottenere la lista degli ordini con date"""
    try:
        response = requests.get(f"{BACKEND_URL}/ordini/{ancodice}")
        if response.status_code == 200:
            return response.json().get("ordini", [])
        return []
    except requests.exceptions.RequestException as e:
        st.error(f"Errore nel recuperare gli ordini: {e}")
        return []

# Generated by Copilot
def get_info_ordine(mvserial: str) -> Dict[str, Any]:
    """Funzione per ottenere le informazioni di un ordine specifico"""
    try:
        response = requests.get(f"{BACKEND_URL}/ordini/info/{mvserial}")
        if response.status_code == 200:
            return response.json().get("info", {})
        return {}
    except requests.exceptions.RequestException as e:
        st.error(f"Errore nel recuperare le informazioni dell'ordine: {e}")
        return {}

# Generated by Copilot
def get_dettagli_ordine(mvserial: str) -> List[Dict[str, Any]]:
    """Funzione per ottenere i dettagli di un ordine"""
    try:
        response = requests.get(f"{BACKEND_URL}/ordini/dettagli/{mvserial}")
        if response.status_code == 200:
            return response.json().get("dettagli", [])
        return []
    except requests.exceptions.RequestException as e:
        st.error(f"Errore nel recuperare i dettagli dell'ordine: {e}")
        return []

# Generated by Copilot
def pagina_login() -> None:
    """Pagina 1: Login"""
    st.title("Login - Controllo Ordini")
    ancodice = st.text_input("Codice utente (ANCODICE)")
    anpariva = st.text_input("Partita IVA (ANPARIVA)")
    
    if st.button("Accedi"):
        if ancodice and anpariva:
            if login_backend(ancodice, anpariva):
                st.session_state["logged_in"] = True
                st.session_state["ancodice"] = ancodice
                st.success("Login riuscito!")
                st.rerun()
            else:
                st.error("Credenziali non valide")
        else:
            st.warning("Inserisci sia il codice utente che la partita IVA")

# Generated by Copilot
def pagina_elenco_ordini() -> None:
    """Pagina 2: Elenco ordini"""
    st.title("Storico ordini")
    ordini = get_ordini(st.session_state["ancodice"])
    
    if not ordini:
        st.info("Nessun ordine trovato.")
        return
    
    # Crea una lista di opzioni per il selectbox con ordine e data
    opzioni_ordini = []
    for ordine in ordini:
        # Formatta la data per la visualizzazione
        data_str = ordine['mvdatreg'][:10]  # Prende solo la parte della data (YYYY-MM-DD)
        opzione = f"{ordine['mvserial']} - {data_str}"
        opzioni_ordini.append(opzione)
    
    # Selectbox con ordini e date
    ordine_scelto_display = st.selectbox("Seleziona un ordine", opzioni_ordini)
    
    if st.button("Vedi dettagli ordine"):
        # Estrae solo il codice ordine dalla selezione
        ordine_scelto = ordine_scelto_display.split(" - ")[0]
        st.session_state["ordine_corrente"] = ordine_scelto
        st.session_state["pagina"] = 3
        st.rerun()

# Generated by Copilot
def pagina_dettaglio_ordine() -> None:
    """Pagina 3: Dettaglio ordine"""
    ordine_corrente = st.session_state["ordine_corrente"]
    
    # Ottieni le informazioni dell'ordine inclusa la data
    info_ordine = get_info_ordine(ordine_corrente)
    
    # Mostra il titolo con il numero ordine
    st.title(f"Dettaglio ordine {ordine_corrente}")
    
    # Mostra la data come sottotitolo se disponibile
    if info_ordine and 'mvdatreg' in info_ordine:
        data_formattata = info_ordine['mvdatreg'][:10]  # Formato YYYY-MM-DD
        st.subheader(f"Data ordine: {data_formattata}")
    
    # Ottieni e mostra i dettagli dell'ordine
    dettagli = get_dettagli_ordine(ordine_corrente)
    if not dettagli:
        st.info("Nessun prodotto trovato per questo ordine.")
        return
    
    # Generated by Copilot
    # Convert list of dictionaries to DataFrame for better table display
    df_dettagli = pd.DataFrame(dettagli)
    st.table(df_dettagli)

# Generated by Copilot
# Logica principale dell'applicazione
def main() -> None:
    """Funzione principale per gestire la navigazione tra le pagine"""
    # Inizializzazione dello stato della sessione
    if "pagina" not in st.session_state:
        st.session_state["pagina"] = 1
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    # Navigazione tra le pagine
    if st.session_state["pagina"] == 1:
        pagina_login()
        if st.session_state["logged_in"]:
            st.session_state["pagina"] = 2
            st.rerun()
    elif st.session_state["pagina"] == 2:
        pagina_elenco_ordini()
    elif st.session_state["pagina"] == 3:
        pagina_dettaglio_ordine()
        if st.button("Torna all'elenco ordini"):
            st.session_state["pagina"] = 2
            st.rerun()

if __name__ == "__main__":
    main() 